import React from 'react'
import 'bootstrap/dist/css/bootstrap.min.css'
import './styles.css';
import Container from 'react-bootstrap/Container'
import Row from 'react-bootstrap/Row'
import Col from 'react-bootstrap/Col'

import GameExemple1 from '../../assets/GameExemple1.png'
import GameExemple2 from '../../assets/GameExemple2.png'

export default function Pontuacao() {

  return (
    <>
      <Row>
        <Col>
          <h3>Cumprindo Objetivos e PontuaÃ§Ã£o</h3>
        </Col>
      </Row>
      <Row>
        <Col>
          <h6>OBJETIVOS</h6>
        </Col>
      </Row>
      <Row>
        <Row>
          <Col>
            <p>Existem dois tipos de objetivos que podem ser comprados ou escolhidos, que
            possuem pontuaÃ§Ãµes diferentes. (TEORIA: As atividades realizadas por um processador
            (funÃ§Ã£o) podem ser divididas em duas grandes categorias: funÃ§Ã£o processamento
            e funÃ§Ã£o controle).</p>
          </Col>
        </Row>
        <Row>
          <Col>
            <h6>PONTUAÃ‡ÃƒO</h6>
          </Col>
        </Row>
        <Row>
          <Col>
            <p>Objetivo <b>funÃ§Ã£o controle</b> com 7 turnos (700 pontos + 100 extra, se decodificado
          de forma correta) (TEORIA: FunÃ§Ã£o controle exercida pelos componentes que se
          encarregam das atividades de busca interpretaÃ§Ã£o e controle da execuÃ§Ã£o das
          instruÃ§Ãµes, bem como do controle da aÃ§Ã£o dos demais componentes do sistema de
            computaÃ§Ã£o, por exemplo: memÃ³ria, E/S):</p>
            <p>Ex: O Caps Lock do teclado foi pressionado. Acenda o LED correspondente.
            (MP ðŸ¡ª RDM + CI ðŸ¡ª RI + Decodificador de InstruÃ§Ã£o ðŸ¡ª UC ðŸ¡ª UAL ðŸ¡ª UC +
              RDM ðŸ¡ª  MP ðŸ¡ª Teclado) </p>
          </Col>
        </Row>
        <Row>
          <Col>
            <img src={GameExemple1} alt="GameEx1" className="full" />
            <p>Jogadas que o processo Cyano faria para cumprir seu objetivo de
            funÃ§Ã£o controle, acaso ele nÃ£o erre ou seja atrapalhado por outro jogador.</p>
          </Col>
        </Row>
      </Row>
      <Row>
        <Col>
          <p>Objetivo <b>funÃ§Ã£o processamento</b> com 8 turnos (800 pontos + 200 extra se
            decodificados de forma correta) (TEORIA: FunÃ§Ã£o processamento se encarrega
            de realizar as atividades relacionadas com a efetiva execuÃ§Ã£o de uma operaÃ§Ã£o,
            ou seja, processar, realizar um cÃ¡lculo aritmÃ©tico ou lÃ³gico):</p>
          <p>Ex: Dois dados da memÃ³ria principal A e B descobrir qual operaÃ§Ã£o serÃ¡
            realizada (A{">"}B) com esses dados e exibir o resultado em tela (Dado A MP ðŸ¡ª
            RDM + CI ðŸ¡ª RI + Decodificador de InstruÃ§Ã£o + UC ðŸ¡ª dado A RT  + requisita
            dado B na REM  ðŸ¡ª dado A UAL + dado B RDM + dado B RT ðŸ¡ª dado B UAL
            (comparaÃ§Ã£o Ã© feita) Resultado ðŸ¡ª  UC + RDM ðŸ¡ª  MP ðŸ¡ª  Monitor).</p>
        </Col>
        <Row>
          <Col>
            <img src={GameExemple2} alt="GameEx2" className="full" />
            <p>Jogadas que o processo Cyano faria para cumprir seu objetivo de funÃ§Ã£o
            processamento, acaso ele nÃ£o erre ou seja atrapalhado por outro jogador.</p>
          </Col>
        </Row>
      </Row>
      <Row>
        <Col>
          <p>Ao cumprir um objetivo outro poderÃ¡ ser comprado atÃ© a finalizaÃ§Ã£o do jogo
            (dependendo do andamento). </p>
          <p>O jogo acaba idealmente apÃ³s 3h corridas de jogo (30 segundos por grupo â†’ 6
            grupos â†’ 8-15 turnos â†’ 24 a 45- 60min se nÃ£o existirem atrasos).</p>
          <p>OU</p>
          <p>Dependendo do andamento, o jogo dura atÃ© 3 grupos conseguirem completar um
          objetivo (previsÃ£o de 12 turnos 1-2h) se essa for a opÃ§Ã£o escolhida os demais
          grupos que nÃ£o completaram seu objetivo descontam da pontuaÃ§Ã£o o nÃºmero de
          turnos multiplicado por 25 da pontuaÃ§Ã£o final. Por exemplo o grupo amarelo
          precisaria de mais 4 rodadas (clocks) para finalizar seu objetivo de 800 + 200
            ou seja 1000 â€“ (4x25) = 900 pontos no final.</p>
          <p><b>Ganha o jogador que acumular mais pontos</b></p>
        </Col>
      </Row>
    </>
  )
}